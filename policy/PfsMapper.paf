#<?cfg paf policy ?>

needCalibRegistry: true

camera:        "../pfs/camera"
defects:    "../pfs/defects"

skytiles: {
    resolutionPix: 700    # Resolution for skytiles: 700 --> 500 arcsec sides
    paddingArcsec: 10.0   # Overlap between skytiles
}

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccd"
    tract: "patch"
    visit: "ccd"
    sensor: "none"
}
defaultLevel: "sensor"
defaultSubLevels: {
    # Default sublevel for dataRef.subItems()
    skyTile: "sensor"
    visit: "sensor"
    sensor: "none"
}

exposures: {
    raw: {
        template:    "%(dateObs)s/PF%(site)s%(category)s%(visit)06d%(arm)s%(spectrograph)1d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    postISRCCD: {
        template:    "postISRCCD/%(dateObs)s/v%(visit)07d/PF%(site)s%(category)s%(arm)s%(spectrograph)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
#    visitim: {
#        template:      "visitim/v%(visit)07d/cPF%(site)s%(category)s%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:        "ExposureF"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
    calexp: {
        template:    "calExp/%(dateObs)s/v%(visit)07d/PF%(site)s%(category)s%(arm)s%(spectrograph)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
#    spArm: {
#        template:       "spArm/%(dateObs)s/v%(visit)07d/pfsArm-%(visit)06d-%(spectrograph)d%(filter)s.fits"
#        python:         "pfs.drp.stella.pipe_out.SpArm"
#        persistable:    "ignore"
#        storage:        "FitsCatalogStorage"
#    }
    spArm: {
        template:      "spArm/%(dateObs)s/v%(visit)07d/pfsArm-%(visit)06d-%(spectrograph)d%(arm)s.fits"
        python:        "pfs.drp.stella.SpectrumSet"
        persistable:   "SpectrumSet"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
#    revexp: {
#        template:      "%(pointing)05d/corr/CORW-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:        "ExposureF"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }

#    expMetadata: {
#        template: "%(pointing)05d/qa/metaQaExp-%(visit)06d-000.fits"
#        python:        "lsst.afw.image.ExposureI"
#        persistable:        "ExposureI"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }

#    wcs: {
#        template: "%(pointing)05d/corr/%(tract)04d/wcs-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureI"
#        persistable:        "ExposureI"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#        columns:       "pointing" "visit" "ccd"
#    }

#    fcr: {
#        template: "%(pointing)05d/corr/%(tract)04d/fcr-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureI"
#        persistable:        "ExposureI"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#        columns:       "pointing" "visit" "ccd"
#    }

#    detj: {
#        template:      "%(pointing)05d/corr/%(tract)04d/DETJ-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:        "ExposureF"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#        columns:       "pointing" "visit" "ccd"
#    }

#    dcor: {
#        template:      "%(pointing)05d/corr/%(tract)04d/DCOR-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:        "ExposureF"
#        storage:    "FitsStorage"
#        level:        "Ccd"
#        tables:        "raw"
#        tables:        "raw_visit"
#        columns:       "pointing" "visit" "ccd"
#    }

#    calibrated_src: {
#        template:      "%(pointing)05d/output/%(tract)04d/CALSRC-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#        columns:       "pointing" "visit" "ccd"
#    }

#    calibrated_exp:  {
#        template:      "%(pointing)05d/corr/%(tract)04d/CALEXP-%(visit)06d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:   "ExposureF"
#        storage:       "FitsStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#        columns:       "pointing" "visit" "ccd"
#    }

#    deepCoadd: {
#        template:    "deepCoadd/%(tract)d/%(patch)s.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw_skytile
#    }
#    deepCoadd_calexp: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/calexp-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:   "ExposureF"
#        storage:       "FitsStorage"
#        level:         "None"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_calexp_det: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/calexp_det-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:   "ExposureF"
#        storage:       "FitsStorage"
#        level:         "None"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_depth: {
#        template:    "deepCoadd/%(tract)d/%(patch)s.depth.fits"
#        python:      "lsst.afw.image.ImageF"
#        persistable: "ImageF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw_skytile
#    }
#    deepCoadd_tempExp: {
#        template:    "deepCoadd/%(tract)d/%(patch)s/warp-%(tract)d-%(patch)s-%(visit)d.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw_skytile
#    }
#    deepCoadd_bgRef: {
#        template:    "deepCoadd/%(tract)d/%(patch)s/bgRef-%(tract)d-%(patch)s.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw_skytile
#    }
#    deepCoadd_bg: {
#        template:      "deepCoadd/%(tract)d/%(patch)s/bgModel-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.image.ImageF"
#        persistable:   "ImageF"
#        storage:       "FitsStorage"
#        level:         "Skytile"
#        tables:        raw_skytile
#    }

#    deepCoadd_diff: {
#        template:    "deepCoadd-diff/%(tract)d/diff-%(tract)d-%(patch)s.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw_skytile
#    }
#    deepCoadd_tempExp_diff: {
#        template:    "deepCoadd-diff/%(tract)d/%(patch)s/diff-%(tract)d-%(patch)s-%(visit)d.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw_skytile
#    }

#    diff: {
#        template:      "diff/%(diff)05d/DIFF%(patch)08d.fits"
#        python:        "lsst.afw.image.ExposureF"
#        persistable:        "ExposureF"
#        storage:    "FitsStorage"
#        level:        "Skytile"
#        tables:        "raw_skytile"
#    }

#    mosaicCalib: {
#        template:    "%(pointing)05d/output/CALIB-%(visit)07d-%(filter)s%(spectrograph)1d-%(tract)d.fits"
#        python:      "lsst.afw.image.ExposureU"
#        persistable: "ExposureU"
#        storage:     "FitsStorage"
#        columns:     pointing
#        columns:     visit
#        columns:     ccd
#        tables:      raw
#        level:       Ccd
#    }

#    coaddTempExp: {
#        template:    "coaddTemp/%(tract)d/TEMP-%(visit)07d-%(filter)s%(spectrograph)1d-%(patch)s.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Skytile"
#        tables:      raw
#    }

#    ossImage: {
#        template:    "%(pointing)05d/thumbs/oss-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Ccd"
#        tables:      "raw"
#        tables:      "raw_visit"
#    }
#    flattenedImage: {
#        template:    "%(pointing)05d/thumbs/flattened-%(visit)07d-%(filter)s%(spectrograph)01d.fits"
#        python:      "lsst.afw.image.ExposureF"
#        persistable: "ExposureF"
#        storage:     "FitsStorage"
#        level:       "Ccd"
#        tables:      "raw"
#        tables:      "raw_visit"
#    }

}

calibrations: {
    bias: {
        template:    "BIAS/NONE/%(calibVersion)s/pfsBias-%(calibDate)s-0-%(spectrograph)1d%(arm)s.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "bias"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    dark: {
        template:    "DARK/NONE/%(calibVersion)s/pfsDark-%(calibDate)s-0-%(spectrograph)1d%(arm)s.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "dark"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
#    tracedef: {
#        template:    "TRACEDEF/%(calibDate)s/%(filter)s/%(calibVersion)s/TRACEDEF-PF%(site)s%(category)s_%(spectrograph)1d%(filter)s.fits"
#        python:      "lsst.afw.image.MaskedImageF"
#        persistable: "MaskedImageF"
#        storage:     "FitsStorage"
#        level:       "Ccd"
#        tables:      "traceDef"
#        columns:     "ccd"
#        columns:     "taiObs"
#        reference:   "raw_visit"
#        refCols:     "visit"
#        validRange:  true
#        validStartName: validStart
#        validEndName: validEnd
#    }
    flat: {
        template:    "FLAT/%(filter)s/%(calibVersion)s/pfsFlat-%(calibDate)s-0-%(spectrograph)1d%(arm)s.fits"
        python:      "lsst.afw.image.MaskedImageF"
        persistable: "MaskedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "flat"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    arc: {
        template:    "ARC/%(filter)s/%(calibVersion)s/pfsArc-%(calibDate)s-0-%(spectrograph)1d%(arm)s.fits"
        python:      "lsst.afw.image.MaskedImageF"
        persistable: "MaskedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "arc"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    fringe: {
        template:    "FRINGE/%(filter)s/%(calibVersion)s/FRINGE-%(calibDate)s-0-%(spectrograph)1d%(arm)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "fringe"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
}

datasets: {
#    calexpBackground: {
#        template:      "%(pointing)05d/corr/BKGD-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.math.BackgroundList"
#        persistable:   "PurePythonClass"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
    psf: {
        template:      "%(visit)s/output/%(filter)s/PS%(site)s%(category)s%(spectrograph)1d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
#    apCorr: {
#        template:      "%(pointing)05d/output/APC-%(visit)07d-%(filter)s%(spectrograph)1d.pickle"
#        python:        "lsst.meas.algorithms.ApertureCorrection"
#        persistable:        "ApertureCorrection"
#        storage:    "PickleStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    src: {
#        template:      "%(pointing)05d/output/SRC-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "SourceCatalog"
#        storage:    "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    src_schema: {
#        template:      "schema/src.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    transformed_src: {
#        template:      "%(pointing)05d/output/TRSRC-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    transformed_src_schema: {
#        template:      "schema/transformed_src.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    icMatch: {
#        template:      "%(pointing)05d/output/MATCH-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:        "BaseCatalog"
#        storage:    "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    icMatchFull: {
#        template:      "%(pointing)05d/output/ML-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "BaseCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    srcMatch: {
#        template:      "%(pointing)05d/output/SRCMATCH-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "BaseCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    srcMatchFull: {
#        template:      "%(pointing)05d/output/SRCML-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "BaseCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    icSrc: {
#        template:      "%(pointing)05d/output/ICSRC-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    icSrc_schema: {
#        template:      "schema/icSrc.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }


    log: {
        template:      "%(visit)s/logs/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(visit)s/logs"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }

#    deepCoadd_diffsrc: {
#        template:    "deepCoadd-diff/%(tract)d/diffsrc-%(tract)d-%(patch)s.fits"
#        python:      "lsst.afw.table.SourceCatalog"
#        persistable: "SourceCatalog"
#        storage:     "FitsCatalogStorage"
#	tables:      "raw_skytile"
#    }
#    deepCoadd_tempExp_diffsrc: {
#        template:    "deepCoadd-diff/%(tract)d/%(patch)s/diffsrc-%(tract)d-%(patch)s-%(visit)d.fits"
#        python:      "lsst.afw.table.SourceCatalog"
#        persistable: "SourceCatalog"
#        storage:     "FitsCatalogStorage"
#	tables:      "raw_skytile"
#    }

#    diffsources: {
#        template:      "diff/%(diff)05d/SRC%(patch)08d.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw_skytile"
#    }
#    diffsources_schema: {
#        template:      "schema/diffsources.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw_skytile"
#    }

#    diffpsf: {
#        template:      "diff/%(diff)05d/PSF%(patch)08d.boost"
#        python:        "lsst.afw.detection.Psf"
#        persistable:   "Psf"
#        storage:       "BoostStorage"
#        tables:        "raw_skytile"
#    }

#    warppsf: {
#        template:      "%(pointing)05d/warp/WARPPSF-%(visit)07d-%(filter)s%(spectrograph)1d.boost"
#        python:        "lsst.afw.detection.Psf"
#        persistable:   "Psf"
#        storage:       "BoostStorage"
#        tables:        "raw_skytile"
#    }
 
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
#    deepCoaddId: {
#        template:     "ignored"
#        # Provide something to import, although we actually return a Long
#        python:       "lsst.daf.base.PropertySet"
#        persistable:  "ignored"
#        storage:      "ignored"
#        tables:       "raw"
#    }
#    deepCoaddId_bits: {
#        template:     "ignored"
#        # Provide something to import, although we actually return an int
#        python:       "lsst.daf.base.PropertySet"
#        persistable:  "ignored"
#        storage:      "ignored"
#        tables:       "raw"
#    }
#    deepMergedCoaddId: {
#        template:     "ignored"
#        # Provide something to import, although we actually return a Long
#        python:       "lsst.daf.base.PropertySet"
#        persistable:  "ignored"
#        storage:      "ignored"
#        tables:       "raw"
#    }
#    deepMergedCoaddId_bits: {
#        template:     "ignored"
#        # Provide something to import, although we actually return an int
#        python:       "lsst.daf.base.PropertySet"
#        persistable:  "ignored"
#        storage:      "ignored"
#        tables:       "raw"
#    }

#    stackExposureId: {
#        template:     "ignored"
#        # Provide something to import, although we actually return a long
#        python:       "lsst.daf.base.PropertySet"
#        persistable:  "ignored"
#        storage:      "ignored"
#        tables:       "raw"
#    }
#    stackExposureId_bits: {
#        template:     "ignored"
#        # Provide something to import, although we actually return an int
#        python:       "lsst.daf.base.PropertySet"
#        persistable:  "ignored"
#        storage:      "ignored"
#        tables:       "raw"
#    }

    eups_versions: {
        template:      "config/eups.versions"
        python:        "lsst.daf.persistence.EupsVersions"
        persistable:   "ignored"
        storage:       "EupsStorage"
    }

    processCcd_config: {
        template:      "config/processCcd.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processCcd_metadata: {
        template:      "%(pointing)05d/processCcd_metadata/%(visit)07d-%(filter)s%(spectrograph)1d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

#    transformSrcMeasurement_config: {
#        template:      "config/transformSrcMeasurement.py"
#        python:        "lsst.pipe.tasks.transformMeasurement.RunTransformConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    transformSrcMeasurement_metadata: {
#        template:      "%(pointing)05d/transformSrcMeasurement_metadata/%(visit)07d-%(filter)s%(spectrograph)1d.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    processExposure_config: {
#        template:      "config/processExposure.py"
#        python:        "hsc.pipe.tasks.processExposure.ProcessExposureConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    processExposure_metadata: {
#        template:      "%(pointing)05d/processExposure_metadata/%(visit)07d.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    Mosaic_config: {
#        template:      "config/mosaic.py"
#        python:        "lsst.meas.mosaic.mosaicTask.MosaicConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    processStack_config: {
#        template:      "config/processStack.py"
#        python:        "hsc.pipe.tasks.processStack.ProcessStackConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    processStack_metadata: {
#        template:      "stack/%(stack)05d/processStack_metadata/%(patch)08d.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    deepCoadd_initPsf: {
#        template:    "deepCoadd/%(tract)d/%(patch)s.boost"
#        python:      "lsst.afw.detection.Psf"
#        persistable: "Psf"
#        storage:     "BoostStorage"
#        tables:      raw
#    }
#    deepCoadd_skyMap: {
#        template:    "deepCoadd/skyMap.pickle"
#        python:      "lsst.skymap.BaseSkyMap"
#        persistable: "ignored"
#        storage:     "PickleStorage"
#        tables:      raw
#    }
#    deep_makeSkyMap_metadata: {
#        template:      "metadata/deep_makeSkyMap.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#    }
#    deep_makeDiscreteSkyMap_metadata: {
#        template:      "metadata/deep_makeDiscreteSkyMap.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#    }
#    deep_makeCoaddTempExp_config: {
#        template:      "config/deep_makeCoaddTempExp.py"
#        python:        "lsst.pipe.tasks.makeCoaddTempExp.MakeCoaddTempExpConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_makeCoaddTempExp_metadata: {
#        template:      "deep_makeCoaddTempExp_metadata/%(tract)d/%(patch)s_metadata.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_assembleCoadd_config: {
#        template:      "config/deep_assembleCoadd.py"
#        python:        "lsst.pipe.tasks.assembleCoadd.AssembleCoaddConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_assembleCoadd_metadata: {
#        template:      "deep_assembleCoadd_metadata/%(tract)d/%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_safeClipAssembleCoadd_config: {
#        template:      "config/deep_assembleCoadd.py"
#        python:        "lsst.pipe.tasks.assembleCoadd.SafeClipAssembleCoaddConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_safeClipAssembleCoadd_metadata: {
#        template:      "deep_assembleCoadd_metadata/%(tract)d/%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }

#    deep_coadd_config: {
#        template:      "config/deep_coadd.py"
#        python:        "lsst.pipe.tasks.coadd.CoaddConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_coadd_metadata: {
#        template:      "deep_coadd_metadata/%(tract)d/%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_icSrc: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/icSrc-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_icSrc_schema: {
#        template:      "schema/deepCoadd_icSrc.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }

#    deepCoadd_psf: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/psf-%(tract)d-%(patch)s.boost"
#        python:        "lsst.afw.detection.Psf"
#        persistable:        "Psf"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_apCorr: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/apCorr-%(tract)d-%(patch)s.pickle"
#        python:        "lsst.meas.algorithms.ApertureCorrection"
#        persistable:        "ApertureCorrection"
#        storage:    "PickleStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_src: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/src-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_src_schema: {
#        template:      "schema/deepCoadd_src.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_srcMatch: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/srcMatch-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "BaseCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    deepCoadd_srcMatchFull: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/srcMatchFull-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "BaseCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    deepCoadd_icMatch: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/icMatch-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.BaseCatalog"
#        persistable:   "BaseCatalog"
#        storage:       "FitsCatalogStorage"
#        tables:        "raw"
#        tables:        "raw_visit"
#    }
#    deepCoadd_calexpBackground: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/bkgd-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.math.BackgroundList"
#        persistable:   "PurePythonClass"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }

#    deepCoadd_calexp_detBackground: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/det_bkgd-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.math.BackgroundList"
#        persistable:   "PurePythonClass"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }

#    deep_processCoadd_config: {
#        template:      "config/deep_processCoadd.py"
#        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deep_processCoadd_metadata: {
#        template:      "deep_processCoadd_metadata/%(tract)d/%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }

    bias_config: {
        template:      "config/bias.py"
        python:        "pfs.drp.stella.detrends.BiasConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    dark_config: {
        template:      "config/dark.py"
        python:        "pfs.drp.stella.detrends.DarkConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    reduceArcTask_config: {
        template:      "config/arc.py"
        python:        "pfs.drp.stella.reduceArcTask.ReduceArcConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    flat_config: {
        template:      "config/flat.py"
        python:        "pfs.drp.stella.detrends.FlatConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
#    fringe_config: {
#        template:      "config/fringe.py"
#        python:        "hsc.pipe.tasks.detrends.FringeConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#
#    solvetansip_config: {
#        template:      "config/solvetansip.py"
#        python:        "lsst.pex.config.Config"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    stacker_config: {
#        template:      "config/stacker.py"
#        python:        "hsc.pipe.tasks.stack.StackConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    forcedCoadd_config: {
#        template:      "config/forcedCoadd.py"
#        python:        "hsc.pipe.tasks.forcedCoadd.ForcedCoaddConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    forcedCcd_config: {
#        template:      "config/forcedCcd.py"
#        python:        "hsc.pipe.tasks.forcedCcd.ForcedCcdConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    deepCoadd_forced_src: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/forced_src-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_forced_src_schema: {
#        template:      "schema/deepCoadd_forced_src.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#    }
#    deepCoadd_forced_config: {
#        template:      "config/forcedPhotCoadd.py"
#        python:        "lsst.meas.base.forcedPhotCoadd.ForcedPhotCoaddConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#    }
#    deepCoadd_forced_metadata: {
#        template:      "deepCoadd_forcedPhotCoadd_metadata/%(tract)d/%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    forced_src: {
#        template:      "%(pointing)05d/tract%(tract)d/FORCEDSRC-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    forced_src_schema: {
#        template:      "schema/forced_src_schema.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:        "ignored"
#        storage:    "FitsCatalogStorage"
#    }
#    forcedPhotCcd_config: {
#        template:      "config/forcedPhotCcd.py"
#        python:        "lsst.meas.base.forcedPhotCcd.ForcedPhotCcdConfig"
#        persistable:      "Config"
#        storage:    "ConfigStorage"
#    }
#    forcedPhotCcd_metadata: {
#        template:      "%(pointing)05d/tract%(tract)d/forcedPhotCcd_metadata/%(visit)07d-%(filter)s%(spectrograph)1d.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:        "PropertySet"
#        storage:    "BoostStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

    ossThumb: {
        template:    "%(pointing)05d/thumbs/oss-%(visit)07d-%(filter)s%(spectrograph)1d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    flattenedThumb: {
        template:    "%(pointing)05d/thumbs/flattened-%(visit)07d-%(filter)s%(spectrograph)1d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
#    calexpThumb: {
#        template:    "%(pointing)05d/thumbs/corr-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }

#    plotMagHist: {
#        template:    "%(pointing)05d/qa/magHist-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotSeeingRough: {
#        template:    "%(pointing)05d/qa/seeingRough-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotSeeingRobust: {
#        template:    "%(pointing)05d/qa/seeingRobust-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotSeeingMap: {
#        template:    "%(pointing)05d/qa/seeingMap-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotEllipseMap: {
#        template:    "%(pointing)05d/qa/ellipseMap-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotEllipticityMap: {
#        template:    "%(pointing)05d/qa/ellipticityMap-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotFwhmGrid: {
#        template:    "%(pointing)05d/qa/fwhmGrid-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotEllipseGrid: {
#        template:    "%(pointing)05d/qa/ellipseGrid-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotEllipticityGrid: {
#        template:    "%(pointing)05d/qa/ellipticityGrid-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotPsfSrcGrid: {
#        template:    "%(pointing)05d/qa/psfSrcGrid-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    plotPsfModelGrid: {
#        template:    "%(pointing)05d/qa/psfModelGrid-%(visit)07d-%(filter)s%(spectrograph)1d.png"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    fitsFwhmGrid: {
#        template:    "%(pointing)05d/qa/fwhmGrid-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:      "lsst.afw.image.ImageF"
#        persistable: "ImageF"
#        storage:     "FitsStorage"
#        tables:      raw
#    }
#    fitsEllipticityGrid: {
#        template:    "%(pointing)05d/qa/ellipticityGrid-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:      "lsst.afw.image.ImageF"
#        persistable: "ImageF"
#        storage:     "FitsStorage"
#        tables:      raw
#    }
#    fitsEllPaGrid: {
#        template:    "%(pointing)05d/qa/ellPaGrid-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:      "lsst.afw.image.ImageF"
#        persistable: "ImageF"
#        storage:     "FitsStorage"
#        tables:      raw
#    }
#    fitsPsfSrcGrid: {
#        template:    "%(pointing)05d/qa/psfSrcGrid-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:      "lsst.afw.image.ImageF"
#        persistable: "ImageF"
#        storage:     "FitsStorage"
#        tables:      raw
#    }
#    fitsPsfModelGrid: {
#        template:    "%(pointing)05d/qa/psfModelGrid-%(visit)07d-%(filter)s%(spectrograph)1d.fits"
#        python:      "lsst.afw.image.ImageF"
#        persistable: "ImageF"
#        storage:     "FitsStorage"
#        tables:      raw
#    }
#    tableSeeingMap: {
#        template:    "%(pointing)05d/qa/seeingMap-%(visit)07d-%(filter)s%(spectrograph)1d.txt"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    tableSeeingGrid: {
#        template:    "%(pointing)05d/qa/seeingGrid-%(visit)07d-%(filter)s%(spectrograph)1d.txt"
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }

#    focusPlot: {
#        template:    "%(pointing)05d/qa/focus-%(visit)07d.png"
#        # Not really text: we only need the filename, and will write the output ourselves
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    processFocus_config: {
#        template:      "config/processFocus.py"
#        python:        "hsc.pipe.tasks.focusTask.ProcessFocusConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }
#    processFocus_metadata: {
#        template:      "%(pointing)05d/processFocus_metadata/%(visit)07d.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

#    focusSweepPlot: {
#        template:    "%(pointing)05d/qa/focusSweep-%(visit)07d.png"
#        # Not really text: we only need the filename, and will write the output ourselves
#        python:      __builtin__.str
#        persistable: None
#        storage:     TextStorage
#        tables:      raw
#    }
#    processFocusSweep_config: {
#        template:      "config/processFocusSweep.py"
#        python:        "hsc.pipe.tasks.focusTask.ProcessFocusSweepConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#        tables:        raw
#        tables:        raw_visit
#    }

    # Detections on coadds
#    deepCoadd_det: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/det-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "ignored"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    detectCoaddSources_config: {
#        template:      "config/detect.py"
#        python:        "lsst.pipe.tasks.multiBand.DetectCoaddSourcesConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#    }
#    detectCoaddSources_metadata: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/detectMD-%(tract)d-%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_det_schema: {
#        template:      "schema/deepCoadd_det.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#    }

    # Merged detections on coadds
#    deepCoadd_mergeDet: {
#        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDet-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "ignored"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    mergeCoaddDetections_config: {
#        template:      "config/mergeDetect.py"
#        python:        "lsst.pipe.tasks.multiBand.MergeDetectionsConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#    }
#    mergeCoaddDetections_metadata: {
#        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDetMD-%(tract)d-%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_mergeDet_schema: {
#        template:      "schema/deepCoadd_mergeDet.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#    }
#    deepCoadd_peak_schema: {
#        template:      "schema/deepCoadd_peak.fits"
#        python:        "lsst.afw.detection.PeakCatalog"
#        persistable:   "PeakCatalog"
#        storage:       "FitsCatalogStorage"
#    }

    # Measurements on coadds
#    deepCoadd_meas: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/meas-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "ignored"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_multibandReprocessing: {
#        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/REPROCESSING-%(tract)d-%(patch)s"
#        python:        "__builtin__.str"
#        persistable:   None
#        storage:       "TextStorage"
#    }
#    measureCoaddSources_config: {
#        template:      "config/measureMerged.py"
#        python:        "lsst.pipe.tasks.multiBand.MeasureMergedCoaddSourcesConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#    }
#    measureCoaddSources_metadata: {
#        template:      "deepCoadd-results/%(tract)d/%(patch)s/measMD-%(tract)d-%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_meas_schema: {
#        template:      "schema/deepCoadd_meas.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#    }

    # Reference catalog for coadds
#    deepCoadd_ref: {
#        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/ref-%(tract)d-%(patch)s.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "ignored"
#        storage:       "FitsCatalogStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    mergeCoaddMeasurements_config: {
#        template:      "config/mergeMeasure.py"
#        python:        "lsst.pipe.tasks.multiBand.MergeSourcesConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#    }
#    mergeCoaddMeasurements_metadata: {
#        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeMeasMD-%(tract)d-%(patch)s.boost"
#        python:        "lsst.daf.base.PropertySet"
#        persistable:   "PropertySet"
#        storage:       "BoostStorage"
#        tables:        raw
#        tables:        raw_skyTile
#    }
#    deepCoadd_ref_schema: {
#        template:      "schema/deepCoadd_ref.fits"
#        python:        "lsst.afw.table.SourceCatalog"
#        persistable:   "SourceCatalog"
#        storage:       "FitsCatalogStorage"
#    }

#    multiband_config: {
#        template:      "config/multiband.py"
#        python:        "lsst.pipe.tasks.multiBand.MultiBandConfig"
#        persistable:   "Config"
#        storage:       "ConfigStorage"
#    }

}
